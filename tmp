
services:
  nginx:
    build: ./requirements/nginx
    image: nginx
    container_name: nginx
    ports:
      - "443:443"
    volumes:
      - wordpress-data:/var/www/html
    networks:
      - main-network
    depends_on:
      - wordpress
    restart: always

  wordpress:
    build: ./requirements/wordpress
    image: wordpress
    container_name: wordpress
    volumes:
      - wordpress-data:/var/www/html
    networks:
      - main-network
    depends_on:
      - mariadb
    env_file:
      - .env
    restart: always

  mariadb:
    build: ./requirements/mariadb
    image: mariadb
    container_name: mariadb
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - main-network
    env_file:
      - .env
    restart: always

  redis:
    build: ./requirements/bonus/redis
    image: redis
    container_name: redis
    networks:
      - main-network
    restart: always
  
  vsftpd:
    build: ./requirements/bonus/FTP
    image: vsftpd
    container_name: vsftpd
    volumes:
      - wordpress-data:/var/www/html
    networks:
      - main-network
    env_file: 
      - .env
    restart: always

  adminer:
    build: ./requirements/bonus/adminer
    image: adminer
    container_name: adminer
    networks:
      - main-network
    ports:
      - "8080:8080"
    restart: always

  grafana:
    build: ./requirements/bonus/grafana
    image: grafana
    container_name: grafana
    networks:
      - main-network
    ports:
      - "3000:3000"
    restart: always

  website:
    build: ./requirements/bonus/website
    image: website
    container_name: website
    ports:
      - "80:80"
    restart: always

networks:
  main-network:
    driver: bridge

volumes:
  wordpress-data:
    name: wordpress-data
    driver: local
    driver_opts:
      device: /home/kali/data/wordpress
      o: bind
      type: none

  db-data:
    name: db-data
    driver: local
    driver_opts:
      device: /home/kali/data/database
      o: bind
      type: none

DOCKER_COMPOSE=srcs/docker-compose.yml
ENV_FILE=srcs/.env

all: build

build:
	mkdir -p /home/$(USER)/data/database
	mkdir -p /home/$(USER)/data/wordpress
	docker-compose -f $(DOCKER_COMPOSE) --env-file $(ENV_FILE) up -d --build

logs: 
	docker-compose -f $(DOCKER_COMPOSE) logs

down:
	docker-compose -f $(DOCKER_COMPOSE) down

clean : down
	docker system prune -f --all

fclean: clean 
	sudo rm -rf /home/$(USER)/data

re : down build
#!/bin/bash

if ! [ -d $WP_PATH ];
then
    wp core download --path=$WP_PATH --allow-root
fi

cd $WP_PATH;

if [ -f wp-config.php ] && wp config has DB_PASSWORD --allow-root;
then
    echo "wp-config.php is found"
else
    wp config create --allow-root \
                    --dbname=$DB_DATABASE \
                    --dbuser=$DB_USER \
                    --dbpass=$DB_USER_PASSWORD \
                    --dbhost=$DB_HOST

    echo "wp-config.php file generated"

    echo "Installing Wordpress"

    wp core install --allow-root \
        --url=$DOMAIN_NAME \
        --title=$WP_TITLE \
        --admin_user=$WP_ADMIN \
        --admin_password=$WP_ADMIN_PASSWORD \
        --admin_email=$WP_ADMIN_EMAIL

    wp user create --allow-root $WP_USER $WP_USER_EMAIL --user_pass=$WP_USER_PASSWORD --role=subscriber

#   --------- Bonus redis-cache ---------

    wp config set WP_REDIS_HOST redis --allow-root

    wp config set WP_REDIS_PORT 6379 --allow-root

    wp config set WP_CACHE 'true' --allow-root

    wp plugin install redis-cache --allow-root --activate

    wp redis enable --allow-root

fi

chown -R www-data:www-data /var/www/html/wordpress

php-fpm7.4 -F
